Sys.getenv()
install.packages("research/heatwave/src/CountConsecutive_0.2.tar.gz", repo=NULL, type="source")
install.packages("research/heatwave/src/CountConsecutive_0.2.tar.gz", repo=NULL, type="source")
source('~/research/heatwave/scripts/heatwave_core2.r')
install.packages("RColorBrewer")
source('~/research/heatwave/scripts/heatwave_core2.r')
install.packages("zoo")
source('~/research/heatwave/scripts/heatwave_core2.r')
l <- as.numeric(tmax > 30)
l
source('~/research/heatwave/scripts/project_events.r')
l.obs
l.loc <- count.consecutive(l.obs, 0.5, 3, 0)$location
l.loc
sum(l.loc)
rollapply(l.loc, width=(proj.years*365), by=365, align="right", FUN=sum)
hw.days <- rollapply(l.loc, width=(proj.years*365), by=365, align="right", FUN=sum)
plot(hw.days, type="l")
hw.counts <- rollapply(l.obs, width=(proj.years*365), by=365, align="right", FUN=function(x) {count.consecutive(x, 0.5, 3, 0)$count})
hw.counts
plot(hw.counts, type="l")
hw.days/hw.counts
plot(hw.days/hw.counts, type="l")
plot((hw.days/hw.counts)-3, type="l")
source('~/research/heatwave/scripts/project_days.r')
l.obs
l.obs.3.0 <- l.obs
l.3.0 <- count.consecutive(l.obs, 0.5, 3, 0)
l.3.1 <- count.consecutive(l.obs, 0.5, 3, 1)
sum(l.3.0$location)
sum(l.3.1$location)
maindir <- "/Users/ggg46/research/heatwave"
#maindir <- "/home/greg/research/heatwave"
scriptdir <- paste(maindir, "/scripts", sep="")
srcdir <- paste(maindir, "/src", sep="")
plotdir <- paste(maindir, "/plots", sep="")
datadir <- paste(maindir, "/data/daily/TMAX", sep="")
# Source the core script
core.script <- paste(scriptdir, "/heatwave_core2.r", sep="")
source(core.script)
# Threshold
tmax.thresh <- convert.temp(Tf=90)$Tc
# Number of iterations
niter <- 16000
# Length of past observations for
# model fitting
fit.len <- 2
proj.years <- 30
# Plot to a pdf?
plot2pdf <- FALSE
find.template(c(1,1,0,1), l.obs)$count
find.template(c(1,1,0,1), l.obs)$location
sum(find.template(c(1,1,0,1), l.obs)$location)
find.template(c(1,1,0,1), l.obs)$count
find.template(c(1,1,0,1), l.obs)$location
sum(find.template(c(1,1,0,1), l.obs)$location > 0)
main.template <- c(1,1,0,1,1,1,1,1,1,1,1,1,1,1)
sapply(4:length(main.template), function(x) find.template(main.template[1:x], l.obs)$count)
sapply(4:length(main.template), function(x) sum(find.template(main.template[1:x], l.obs)$location))
sapply(4:length(main.template), function(x) sum(find.template(main.template[1:x], l.obs)$location > 0))
sum(count.consecutive(l.obs, 0.5, 3, 0)$location)
sum(sapply(4:length(main.template), function(x) sum(find.template(main.template[1:x], l.obs)$location > 0)))
main.template <- c(1,1,1,0,1,1,1,1,1,1,1,1,1,1,1)
sum(sapply(4:length(main.template), function(x) sum(find.template(main.template[1:x], l.obs)$location > 0)))
sum(sapply(5:length(main.template), function(x) sum(find.template(main.template[1:x], l.obs)$location > 0)))
sum(count.consecutive(l.obs, 0.5, 3, 0)$location > 0)
sum(count.consecutive(l.obs, 0.5, 3, 1)$location > 0)
sum(count.consecutive(l.obs, 0.5, 4, 1)$location > 0)
# Find the observations over the threshold
l.obs <- as.numeric(coredata(tmax.zoo) > tmax.thresh)
sum(count.consecutive(l.obs, 0.5, 3, 0)$location > 0)
sum(count.consecutive(l.obs, 0.5, 3, 1)$location > 0)
sum(count.consecutive(l.obs, 0.5, 4, 1)$location > 0)
sum(count.consecutive(l.obs, 0.5, 4, 0)$location > 0)
l.2c.obs <- as.numeric(coredata(tmax.zoo)+2 > tmax.thresh)
sum(count.consecutive(l.2c.obs, 0.5, 3, 0)$location > 0)
tmax.zoo
tmax.zoo[1]
?zoo
index(tmax.zoo)
min(which(my.data[,1] == 1900))
my.data[8767,]
plot(coredata(tmax.zoo)[1:8766], type="l")
length(coredata(tmax.zoo))
length(coredata(tmax.zoo)) - 8766
mean(coredata(tmax.zoo)[42368:51134])
mean(coredata(tmax.zoo)[1:8766])
mean(coredata(tmax.zoo)[42368:51134]) - mean(coredata(tmax.zoo)[1:8766])
temp.tmax <- coredata(tmax.zoo)[1:8766]+1.860472
l.obs.temp <- as.numeric(temp.tmax > tmax.thresh)
l.obs.temp.cur <- coredata(tmax.zoo)[42368:51134]
l.obs.temp.cur <- as.numeric(coredata(tmax.zoo)[42368:51134] > tmax.thresh)
l.obs.temp
l.obs.temp.cur
count.consecutive(l.obs.temp, 0.5, 3,0)$count
count.consecutive(l.obs.temp.cur, 0.5, 3,0)$count
sum(count.consecutive(l.obs.temp. 0.5, 3, 0)$location)
sum(count.consecutive(l.obs.temp, 0.5, 3, 0)$location)
sum(count.consecutive(l.obs.temp.cur, 0.5, 3, 0)$location)
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
max(ref.samps[,1])
max(my.samps[,1])
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
library(RColorBrewer)
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
?legend
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet.r')
l=512
l
mods
mods <- l-(0:l) + 1
mods
modu <- cumsum(mods+(mods%%2))
modu
(1:10)%%2
fprint <- read.table("research/slr_framework/code/kopp_2014/ProjectSL-master/IFILES/slr/FPRINT/fprint_gis.mn", header = F, skip = 1)
dim(fprint)
fprint[modu]
fprint <- as.numeric(read.table("research/slr_framework/code/kopp_2014/ProjectSL-master/IFILES/slr/FPRINT/fprint_gis.mn", header = F, skip = 1))
fprint <- read.table("research/slr_framework/code/kopp_2014/ProjectSL-master/IFILES/slr/FPRINT/fprint_gis.mn", header = F, skip = 1)
fprint[1,1]
fprint[1,2]
fprint[1,3]
fprint[1,4]
fprint <- scan("research/slr_framework/code/kopp_2014/ProjectSL-master/IFILES/slr/FPRINT/fprint_gis.mn", skip = 1)
fprint[modu]
mods%%2
bool(mods%%2)
mods%%2 == 1
modb <- modu[mods%%2 == 1]
modb
fprint(modb)
fprint[modb]
sort(2*modb-1)
fprint[modb*2]
fprint[modb*2-1]
3075/4
fprint.nb <- fprint[c(-2*modb, -2*modb-1)]
fprint[2*modb]
fprint[2*modb-1]
fprint[2*modb-2]
fprint[2*modb+1]
fprint.nb[2*modb]
cos.coef <- fprint.nb[seq(1, length(fprint.nb), by=2)]
cos.coeff[1:10]
cos.coef[1:10]
sin.coef <- fprint.nb[seq(2, length(fprint.nb), by=2)]
sin.coef[1:10]
sin.coef[1:l]
sin.coef[1:l+1]
sin.coef[1:l+2]
1-1:10-1
1:10-1
1-1:10
modu
modb
modm <- cumsum(c(0, mods[-(length(mods)-1)] + 1))
modm
modm <- cumsum(c(0, mods[-(length(mods)-1)])) + 1
mdm
modm
library(reticulate)
source_python(paste(lib.dir, "/pickle_reader.py", sep=""))
maindir <- "/Users/ggg46/research/slr_framework"
script.dir <- paste(maindir, "/scripts/diagnostic", sep="")
lib.dir <- paste(maindir, "/scripts/library", sep="")
testdata.dir <- paste(maindir, "/code/test_code", sep="")
source_python(paste(lib.dir, "/pickle_reader.py", sep=""))
my.fp <- read_pickle(paste(testdata.dir, "/test_fingerprint_output.pkl", sep=""))
library(fields)
image.plot(my.fp$lon, my.fp$lat, my.fp$f)
my.fp$lon
my.fp$lat
my.order <- order(my.fp$lat)
image.plot(my.fp$lon, my.fp$lat[my.order], my.fp$f[my.order,])
dim(my.fp$lat)
dim(my.fp$lon)
dim(my.fp$f)
image.plot(my.fp$lon, my.fp$lat[my.order], t(my.fp$f[my.order,]))
image.plot(my.fp$lon-180, my.fp$lat[my.order], t(my.fp$f[my.order,]))
library(maps)
map(add=T)
image.plot(my.fp$lon, my.fp$lat[my.order], t(my.fp$f[my.order,]))
map(add=T)
?map
my.map <- map(type="n")
install.packages("mapproj")
map(projection="lambert")
mapproject(my.fp$lon, my.fp$lat, projection="lambert")
library(mapproj)
mapproject(my.fp$lon, my.fp$lat, projection="lambert")
map(projection="lambert")
map(projection="lambert", par=c(0,0))
map(projection="lambert", par=c(0,180))
map(projection="lambert", par=c(45,180))
map(projection="lambert", par=c(45,90))
map(projection="perspective", par=100)
map(projection="perspective", par=10)
map(projection="perspective", par=1)
map(projection="perspective", par=2)
map(projection="perspective", par=1.1)
map(projection="perspective", par=0.9)
map(projection="perspective", par=3)
map(projection="perspective", par=1)
map(projection="perspective", par=1.0001)
map(projection="perspective", par=1.001)
map(projection="perspective", par=1.01)
map(projection="perspective", par=1.1)
my.fp$lon
my.fp$lon + 180
(my.fp$lon + 180) %% 360
my.lon.order <- order((my.fp$lon + 180) %% 360)
image.plot(my.fp$lon[my.lon.order]-180, my.fp$lat[my.order], t(my.fp$f[my.order,my.lon.order]))
my.fp$lon[my.lon.order]
image.plot(my.fp$lon-180, my.fp$lat[my.order], t(my.fp$f[my.order,my.lon.order]))
map(add=T, col="white")
maindir <- "/Users/ggg46/research/slr_framework"
script.dir <- paste(maindir, "/scripts/diagnostic", sep="")
lib.dir <- paste(maindir, "/scripts/library", sep="")
testdata.dir <- paste(maindir, "/code/test_code", sep="")
# Libraries and sourced code
library(reticulate)
source_python(paste(lib.dir, "/pickle_reader.py", sep=""))
my.data <- read_pickle("research/slr_framework/code/test_code/test_fingerprint_output.pkl")
library(maps)
library(fields)
lat.sort <- order(my.data$lat)
lon.sort <- order(my.data$lon+360)
lon.sort
image.plot(my.data$lon[lon.order], my.data$lat[lat.order], t(my.data$f[lat.order, lon.order]))
image.plot(my.data$lon[lon.sort], my.data$lat[lat.sort], t(my.data$f[lat.sort, lon.sort]))
lon.sort <- order(my.data$lon-180)
image.plot(my.data$lon[lon.sort], my.data$lat[lat.sort], t(my.data$f[lat.sort, lon.sort]))
image.plot(my.data$lon[lon.sort]-180, my.data$lat[lat.sort], t(my.data$f[lat.sort, lon.sort]))
lon.sort <- order((my.data$lon+180) %% 360)
image.plot(my.data$lon[lon.sort]-180, my.data$lat[lat.sort], t(my.data$f[lat.sort, lon.sort]))
image.plot(my.data$lon[lon.sort]-180, my.data$lat[lat.sort], t(my.data$f[lat.sort, lon.sort]))
my.data$lon[lon.sort]-180
order((my.data$lon+180) %% 360)
my.data$lon[order((my.data$lon+180) %% 360)]
my.data$lon[order((my.data$lon+180) %% 360)]-180
image.plot(my.data$lon[lon.sort], my.data$lat[lat.sort], t(my.data$f[lat.sort, lon.sort]))
my.data$lat[lat.sort]
my.data$lon[lon.sort]
my.data$lon
my.data$lon[order((my.data$lon+180) %% 360)]-180
lon.sort <- order((my.data$lon+180) %% 360)
image.plot(my.data$lon[lon.sort], my.data$lat[lat.sort], t(my.data$f[lat.sort, lon.sort]))
lon.sort
my.data$lon[lon.sort]
my.data$lon
my.data$lon + 180
(my.data$lon + 180) %% 360
order((my.data$lon + 180) %% 360)
my.data$lon[order((my.data$lon + 180) %% 360)]
my.data$lon[order((my.data$lon - 180) %% 360)]
my.data$lon[order((my.data$lon + 180) %% 360)]
my.data$lon[order((my.data$lon + 180) %% 360, decreasing = T)]
my.data$lon[order((my.data$lon + 180) %% 360, decreasing = T)]
order((my.data$lon + 180) %% 360, decreasing = T)
sort((my.data$lon + 180) %% 360, decreasing = T)
my.data$lon + 180
(my.data$lon + 180) %% 360
sort((my.data$lon + 180) %% 360)
order((my.data$lon + 180) %% 360)
my.lon.order <- order((my.data$lon + 180) %% 360)
lon.order <- order((my.data$lon + 180) %% 360)
lon.sort <- order((my.data$lon + 180) %% 360)
image.plot(my.data$lon[lon.sort], my.data$lat[lat.sort], t(my.data$f[lat.sort, lon.sort]))
length(lat.sort)
length(lon.sort)
dim(my.data$f)
my.data$lon[lon.sort]
range(my.data$lon[lon.sort])
my.data$lon[1]
my.data$lon[2]
dim(my.data$lon)
my.data$lon[3]
my.data$lon[lon.sort[1]]
my.data$lon[lon.sort[2]]
my.data$lon[lon.sort[3
]]
image.plot((my.data$lon[lon.sort] + 180)%%360, my.data$lat[lat.sort], t(my.data$f[lat.sort, lon.sort]))
map()
image.plot((my.data$lon[lon.sort] + 180)%%360, my.data$lat[lat.sort], t(my.data$f[lat.sort, lon.sort]))
map(add=T, col="white")
image.plot(((my.data$lon[lon.sort] + 180)%%360)-180, my.data$lat[lat.sort], t(my.data$f[lat.sort, lon.sort]))
map(add=T, col="white")
image.plot(((my.data$lon[lon.sort] + 180)%%360)-180, my.data$lat[lat.sort], t(my.data$f[lat.sort, lon.sort])*1000)
map(add=T, col="white")
library(ncdf4)
??ncdf4
nc <- nc_open("research/slr_framework/code/test_code/test.nc")
nc
ncvar_get(nc, "temp")
ncvar_get(nc, "lat")
ncvar_get(nc, "lon")
ncvar_get(nc, "time")
nc_close(nc)
nc <- nc_open("research/slr_framework/code/test_code/local_slr.nc")
nc
gis.slr <- ncvar_get(nc, "localGIS")
dim(gis.slr)
gis.slr[1,,1]
lats <- ncvar_get(nc, "lats")
lats <- ncvar_get(nc, "lat")
lats
nc_close(nc)
nc <- nc_open("research/slr_framework/code/test_code/local_slr.nc")
nc
gis.slr <- ncvar_get(nc, "localGIS")
dim(gis.slr)
gis.slr[1,,1]
gis.slr[1,,1000]
range(gis.slr[1,10,])
lats <- ncvar_get(nc, "lat")
lons <- ncvar_get(nc, "lon")
lats[1]
lons[1]
ids <- ncvar_get(nc, "id")
which(ids == 12)
range(gis.slr[1421,10,])
nc_close(nc)
date
date()
x <- as.Date("20190709", format="%Y%m%D")
x
x <- as.Date("20190709", format="%Y%m%d")
x
x - date()
date()
y <- as.Date(date())
difftime(x, date())
as.Date()
time()
?time
y <- as.Date("20190404", format="%Y%m%d")
y
x-y
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
# Directories
maindir <- "/Users/ggg46/research/slr_framework"
script.dir <- paste(maindir, "/scripts/diagnostic", sep="")
lib.dir <- paste(maindir, "/scripts/library", sep="")
# Libraries and sourced code
library(reticulate)
source_python(paste(lib.dir, "/pickle_reader.py", sep=""))
my.data <- read_pickle("./research/slr_framework/code/gilford_code/icesheets/data/gilford_icesheets_projections.pkl")
use_python("/usr/local/bin/python3")
my.data <- read_pickle("./research/slr_framework/code/gilford_code/icesheets/data/gilford_icesheets_projections.pkl")
use_python("/Library/Frameworks/Python.framework/Versions/3.7/bin/python3")
my.data <- read_pickle("./research/slr_framework/code/gilford_code/icesheets/data/gilford_icesheets_projections.pkl")
use_python("/usr/bin/python")
my.data <- read_pickle("./research/slr_framework/code/gilford_code/icesheets/data/gilford_icesheets_projections.pkl")
names(my.data)
my.samps <- my.data$samps
years <- my.data$years
plot(years, my.samps[,1], type="l")
plot(years, apply(my.samps, 1, mean), type="l", ylim=range(my.samps))
lines(years, apply(my.samps, 1, quantile, probs=0.05), lty=2)
lines(years, apply(my.samps, 1, quantile, probs=0.95), lty=2)
lines(years, apply(my.samps, 1, quantile, probs=0), lty=3)
lines(years, apply(my.samps, 1, quantile, probs=1), lty=3)
install.packages("reticulate")
install.packages("reticulate")
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:reticulate", unload=TRUE)
remove.packages("reticulate")
install.packages("reticulate")
library(reticulate)
# Directories
maindir <- "/Users/ggg46/research/slr_framework"
script.dir <- paste(maindir, "/scripts/diagnostic", sep="")
lib.dir <- paste(maindir, "/scripts/library", sep="")
source_python(paste(lib.dir, "/pickle_reader.py", sep=""))
my.data <- read_pickle("./research/slr_framework/code/gilford_code/icesheets/data/gilford_icesheets_projections.pkl")
use_python("/Library/Frameworks/Python.framework/Versions/3.7/bin/python3")
my.data <- read_pickle("./research/slr_framework/code/gilford_code/icesheets/data/gilford_icesheets_projections.pkl")
source_python(paste(lib.dir, "/pickle_reader.py", sep=""))
my.data <- read_pickle("./research/slr_framework/code/gilford_code/icesheets/data/gilford_icesheets_projections.pkl")
py_config()
use_python("/usr/local/bin/python3")
my.data <- read_pickle("./research/slr_framework/code/gilford_code/icesheets/data/gilford_icesheets_projections.pkl")
py_config()
Sys.getenv()
library(ncdf4)
nc <- nc_open("research/slr_framework/code/gilford_code/icesheets/data/gilford_output.nc")
nc
years <- ncvar_get(nc, "years")
samps <- ncvar_get(nc, "samples")
dim(years)
dim(samps)
samps <- ncvar_get(nc, "AIS")
dim(samps)
years
years <- ncvar_get(nc, "year")
years
plot(years, apply(samps, 1, mean), ylim=range(samps))
plot(years, apply(samps, 2, mean), ylim=range(samps), type="l")
lines(years, apply(samps, 2, quantile, probs=0.05), lty=2)
lines(years, apply(samps, 2, quantile, probs=0.95), lty=2)
samps
samps <- round(ncvar_get(nc, "AIS"), digits = 2)
plot(years, apply(samps, 2, mean), ylim=range(samps), type="l")
lines(years, apply(samps, 2, quantile, probs=0.05), lty=2)
lines(years, apply(samps, 2, quantile, probs=0.95), lty=2)
samps
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
dim(ref.quants)
ref.quants[1,]
my.quants[1,]
my.quants[1,] - ref.quants[1,]
my.quants[2,] - ref.quants[2,]
my.quants[3,] - ref.quants[3,]
diff(my.quants[3,] - ref.quants[3,])
diff(my.quants[1,] - ref.quants[1,])
diff(my.quants[2,] - ref.quants[2,])
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
tmp
tmp <- (1:length(years)) * 17.01505
tmp
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
my.quants
my.quants - ref.quants
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
library(ncdf4)
nc <- nc_open("/Users/ggg46/Downloads/urn_cambridge.org_id_binary_20190516050330838-0397_sup-mat_20190516050330838-0397_S0022143019000224sup001.nc")
nc
nc_close(nc)
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_thermalexp.R')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_local_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_local_icesheet.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet2.r')
source('~/research/slr_framework/scripts/diagnostic/verify_k14_global_icesheet2.r')
setwd("/Users/ggg46/research/slr_framework/code/test_code/gilford_emulator/icesheets/data/")
library(ncdf4)
nc <- nc_open("gilford_output.nc")
nc
ais <- ncvar_get(nc, "AIS")
years <- ncvar_get(nc, "years")
dim)ais
dim(ais)
plot(years, apply(ais, 2, quantile, probs=1))
plot(years, apply(ais, 1, quantile, probs=1))
years
ncvar_get(nc, "samples")
ncvar_get(nc, "sample")
ncvar_get(nc, "year")
years <- ncvar_get(nc, "year")
plot(years, apply(ais, 1, quantile, probs=1))
plot(years, apply(ais, 2, quantile, probs=1))
plot(years, apply(ais, 2, quantile, probs=1), type="l")
lines(years, apply(ais, 2, quantile, probs=0))
lines(years, apply(ais, 2, quantile, probs=0.5), lty=2)
nc
nc_close(nc)
